{"ast":null,"code":"!function (e, t) {\n  \"object\" == typeof exports && \"object\" == typeof module ? module.exports = t(require(\"react\")) : \"function\" == typeof define && define.amd ? define(\"lib\", [\"react\"], t) : \"object\" == typeof exports ? exports.lib = t(require(\"react\")) : e.lib = t(e.react);\n}(\"undefined\" != typeof self ? self : this, function (e) {\n  return function () {\n    \"use strict\";\n\n    var t = {\n        155: function (t) {\n          t.exports = e;\n        }\n      },\n      o = {};\n    function n(e) {\n      var r = o[e];\n      if (void 0 !== r) return r.exports;\n      var s = o[e] = {\n        exports: {}\n      };\n      return t[e](s, s.exports, n), s.exports;\n    }\n    n.d = function (e, t) {\n      for (var o in t) n.o(t, o) && !n.o(e, o) && Object.defineProperty(e, o, {\n        enumerable: !0,\n        get: t[o]\n      });\n    }, n.o = function (e, t) {\n      return Object.prototype.hasOwnProperty.call(e, t);\n    }, n.r = function (e) {\n      \"undefined\" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {\n        value: \"Module\"\n      }), Object.defineProperty(e, \"__esModule\", {\n        value: !0\n      });\n    };\n    var r = {};\n    n.r(r), n.d(r, {\n      useReactToPrint: function () {\n        return f;\n      }\n    });\n    var s = n(155);\n    function i(_ref) {\n      let {\n        level: e = \"error\",\n        messages: t,\n        suppressErrors: o = !1\n      } = _ref;\n      o || (\"error\" === e ? console.error(t) : \"warning\" === e ? console.warn(t) : \"debug\" === e && console.debug(t));\n    }\n    function l(e, t) {\n      if (t || !e) {\n        const e = document.getElementById(\"printWindow\");\n        e && document.body.removeChild(e);\n      }\n    }\n    function a(e, t) {\n      const {\n        documentTitle: o,\n        onAfterPrint: n,\n        onPrintError: r,\n        preserveAfterPrint: s,\n        print: a,\n        suppressErrors: c\n      } = t;\n      setTimeout(() => {\n        var t, d;\n        if (e.contentWindow) {\n          if (e.contentWindow.focus(), a) a(e).then(() => null == n ? void 0 : n()).then(() => l(s)).catch(e => {\n            r ? r(\"print\", e) : i({\n              messages: [\"An error was thrown by the specified `print` function\"],\n              suppressErrors: c\n            });\n          });else {\n            if (e.contentWindow.print) {\n              const n = null !== (d = null === (t = e.contentDocument) || void 0 === t ? void 0 : t.title) && void 0 !== d ? d : \"\",\n                r = e.ownerDocument.title;\n              o && (e.ownerDocument.title = o, e.contentDocument && (e.contentDocument.title = o)), e.contentWindow.print(), o && (e.ownerDocument.title = r, e.contentDocument && (e.contentDocument.title = n));\n            } else i({\n              messages: [\"Printing for this browser is not currently possible: the browser does not have a `print` method available for iframes.\"],\n              suppressErrors: c\n            });\n            null == n || n(), l(s);\n          }\n        } else i({\n          messages: [\"Printing failed because the `contentWindow` of the print iframe did not load. This is possibly an error with `react-to-print`. Please file an issue: https://github.com/MatthewHerbst/react-to-print/issues/\"],\n          suppressErrors: c\n        });\n      }, 500);\n    }\n    function c(e) {\n      const t = [],\n        o = document.createTreeWalker(e, NodeFilter.SHOW_ELEMENT, null);\n      let n = o.nextNode();\n      for (; n;) t.push(n), n = o.nextNode();\n      return t;\n    }\n    function d(e, t, o) {\n      const n = c(e),\n        r = c(t);\n      if (n.length === r.length) for (let e = 0; e < n.length; e++) {\n        const t = n[e],\n          s = r[e],\n          i = t.shadowRoot;\n        if (null !== i) {\n          const e = s.attachShadow({\n            mode: i.mode\n          });\n          e.innerHTML = i.innerHTML, d(i, e, o);\n        }\n      } else i({\n        messages: [\"When cloning shadow root content, source and target elements have different size. `onBeforePrint` likely resolved too early.\", e, t],\n        suppressErrors: o\n      });\n    }\n    const u = '\\n    @page {\\n        /* Remove browser default header (title) and footer (url) */\\n        margin: 0;\\n    }\\n    @media print {\\n        body {\\n            /* Tell browsers to print background colors */\\n            color-adjust: exact; /* Firefox. This is an older version of \"print-color-adjust\" */\\n            print-color-adjust: exact; /* Firefox/Safari */\\n            -webkit-print-color-adjust: exact; /* Chrome/Safari/Edge/Opera */\\n        }\\n    }\\n';\n    function p(e, t, o, n) {\n      var r, s, l;\n      const {\n          contentNode: c,\n          clonedContentNode: p,\n          clonedImgNodes: h,\n          clonedVideoNodes: f,\n          numResourcesToLoad: g,\n          originalCanvasNodes: m\n        } = o,\n        {\n          bodyClass: b,\n          fonts: y,\n          ignoreGlobalStyles: v,\n          pageStyle: w,\n          nonce: E,\n          suppressErrors: A,\n          copyShadowRoots: T\n        } = n;\n      e.onload = null;\n      const x = e.contentDocument || (null === (r = e.contentWindow) || void 0 === r ? void 0 : r.document);\n      if (x) {\n        const o = x.body.appendChild(p);\n        T && d(c, o, !!A), y && ((null === (s = e.contentDocument) || void 0 === s ? void 0 : s.fonts) && (null === (l = e.contentWindow) || void 0 === l ? void 0 : l.FontFace) ? y.forEach(o => {\n          const n = new FontFace(o.family, o.source, {\n            weight: o.weight,\n            style: o.style\n          });\n          e.contentDocument.fonts.add(n), n.loaded.then(() => {\n            t(n);\n          }).catch(e => {\n            t(n, [\"Failed loading the font:\", n, \"Load error:\", e]);\n          });\n        }) : (y.forEach(e => t(e)), i({\n          messages: ['\"react-to-print\" is not able to load custom fonts because the browser does not support the FontFace API but will continue attempting to print the page'],\n          suppressErrors: A\n        })));\n        const n = null != w ? w : u,\n          r = x.createElement(\"style\");\n        E && (r.setAttribute(\"nonce\", E), x.head.setAttribute(\"nonce\", E)), r.appendChild(x.createTextNode(n)), x.head.appendChild(r), b && x.body.classList.add(...b.split(\" \"));\n        const a = x.querySelectorAll(\"canvas\");\n        for (let e = 0; e < m.length; ++e) {\n          const t = m[e],\n            o = a[e];\n          if (void 0 === o) {\n            i({\n              messages: [\"A canvas element could not be copied for printing, has it loaded? `onBeforePrint` likely resolved too early.\", t],\n              suppressErrors: A\n            });\n            continue;\n          }\n          const n = o.getContext(\"2d\");\n          n && n.drawImage(t, 0, 0);\n        }\n        for (let e = 0; e < h.length; e++) {\n          const o = h[e],\n            n = o.getAttribute(\"src\");\n          if (n) {\n            const e = new Image();\n            e.onload = () => t(o), e.onerror = (e, n, r, s, i) => t(o, [\"Error loading <img>\", o, \"Error\", i]), e.src = n;\n          } else t(o, ['Found an <img> tag with an empty \"src\" attribute. This prevents pre-loading it.', o]);\n        }\n        for (let e = 0; e < f.length; e++) {\n          const o = f[e];\n          o.preload = \"auto\";\n          const n = o.getAttribute(\"poster\");\n          if (n) {\n            const e = new Image();\n            e.onload = () => t(o), e.onerror = (e, r, s, i, l) => t(o, [\"Error loading video poster\", n, \"for video\", o, \"Error:\", l]), e.src = n;\n          } else o.readyState >= 2 ? t(o) : (o.onloadeddata = () => t(o), o.onerror = (e, n, r, s, i) => t(o, [\"Error loading video\", o, \"Error\", i]), o.onstalled = () => t(o, [\"Loading video stalled, skipping\", o]));\n        }\n        const g = \"select\",\n          S = c.querySelectorAll(g),\n          k = x.querySelectorAll(g);\n        for (let e = 0; e < S.length; e++) k[e].value = S[e].value;\n        if (!v) {\n          const e = document.querySelectorAll(\"style, link[rel~='stylesheet'], link[as='style']\");\n          for (let o = 0, n = e.length; o < n; ++o) {\n            const n = e[o];\n            if (\"style\" === n.tagName.toLowerCase()) {\n              const e = x.createElement(n.tagName),\n                t = n.sheet;\n              if (t) {\n                let r = \"\";\n                try {\n                  const e = t.cssRules.length;\n                  for (let o = 0; o < e; ++o) \"string\" == typeof t.cssRules[o].cssText && (r += `${t.cssRules[o].cssText}\\r\\n`);\n                } catch (e) {\n                  i({\n                    messages: [\"A stylesheet could not be accessed. This is likely due to the stylesheet having cross-origin imports, and many browsers block script access to cross-origin stylesheets. See https://github.com/MatthewHerbst/react-to-print/issues/429 for details. You may be able to load the sheet by both marking the stylesheet with the cross `crossorigin` attribute, and setting the `Access-Control-Allow-Origin` header on the server serving the stylesheet. Alternatively, host the stylesheet on your domain to avoid this issue entirely.\", n, `Original error: ${null == e ? void 0 : e.message}`],\n                    level: \"warning\"\n                  });\n                }\n                e.setAttribute(\"id\", `react-to-print-${o}`), E && e.setAttribute(\"nonce\", E), e.appendChild(x.createTextNode(r)), x.head.appendChild(e);\n              }\n            } else if (n.getAttribute(\"href\")) {\n              if (n.hasAttribute(\"disabled\")) i({\n                messages: [\"`react-to-print` encountered a <link> tag with a `disabled` attribute and will ignore it. Note that the `disabled` attribute is deprecated, and some browsers ignore it. You should stop using it. https://developer.mozilla.org/en-US/docs/Web/HTML/Element/link#attr-disabled. The <link> is:\", n],\n                level: \"warning\"\n              }), t(n);else {\n                const e = x.createElement(n.tagName);\n                for (let t = 0, o = n.attributes.length; t < o; ++t) {\n                  const o = n.attributes[t];\n                  o && e.setAttribute(o.nodeName, o.nodeValue || \"\");\n                }\n                e.onload = () => t(e), e.onerror = (o, n, r, s, i) => t(e, [\"Failed to load\", e, \"Error:\", i]), E && e.setAttribute(\"nonce\", E), x.head.appendChild(e);\n              }\n            } else i({\n              messages: [\"`react-to-print` encountered a <link> tag with an empty `href` attribute. In addition to being invalid HTML, this can cause problems in many browsers, and so the <link> was not loaded. The <link> is:\", n],\n              level: \"warning\"\n            }), t(n);\n          }\n        }\n      }\n      0 === g && a(e, n);\n    }\n    function h(e, t, o, n) {\n      e.onload = () => p(e, t, o, n), document.body.appendChild(e);\n    }\n    function f(e) {\n      const {\n          contentRef: t,\n          fonts: o,\n          ignoreGlobalStyles: n,\n          onBeforePrint: r,\n          onPrintError: c,\n          preserveAfterPrint: d,\n          suppressErrors: u\n        } = e,\n        p = (0, s.useCallback)(s => {\n          l(d, !0);\n          const p = function (_ref2) {\n            let {\n              contentRef: e,\n              optionalContent: t,\n              suppressErrors: o\n            } = _ref2;\n            return t && (e && i({\n              level: \"warning\",\n              messages: ['\"react-to-print\" received a `contentRef` option and a optional-content param passed to its callback. The `contentRef` option will be ignored.']\n            }), \"function\" == typeof t) ? t() : e ? e.current : void i({\n              messages: ['\"react-to-print\" did not receive a `contentRef` option or a optional-content param pass to its callback.'],\n              suppressErrors: o\n            });\n          }({\n            contentRef: t,\n            optionalContent: s,\n            suppressErrors: u\n          });\n          if (!p) return void i({\n            messages: [\"There is nothing to print\"],\n            suppressErrors: u\n          });\n          const f = p.cloneNode(!0),\n            g = document.querySelectorAll(\"link[rel~='stylesheet'], link[as='style']\"),\n            m = f.querySelectorAll(\"img\"),\n            b = f.querySelectorAll(\"video\"),\n            y = o ? o.length : 0,\n            v = (n ? 0 : g.length) + m.length + b.length + y,\n            w = [],\n            E = [],\n            A = function () {\n              const e = document.createElement(\"iframe\");\n              return e.width = `${document.documentElement.clientWidth}px`, e.height = `${document.documentElement.clientHeight}px`, e.style.position = \"absolute\", e.style.top = `-${document.documentElement.clientHeight + 100}px`, e.style.left = `-${document.documentElement.clientWidth + 100}px`, e.id = \"printWindow\", e.srcdoc = \"<!DOCTYPE html>\", e;\n            }(),\n            T = (t, o) => {\n              w.includes(t) ? i({\n                level: \"debug\",\n                messages: [\"Tried to mark a resource that has already been handled\", t],\n                suppressErrors: u\n              }) : (o ? (i({\n                messages: ['\"react-to-print\" was unable to load a resource but will continue attempting to print the page', ...o],\n                suppressErrors: u\n              }), E.push(t)) : w.push(t), w.length + E.length === v && a(A, e));\n            },\n            x = {\n              contentNode: p,\n              clonedContentNode: f,\n              clonedImgNodes: m,\n              clonedVideoNodes: b,\n              numResourcesToLoad: v,\n              originalCanvasNodes: p.querySelectorAll(\"canvas\")\n            };\n          r ? r().then(() => h(A, T, x, e)).catch(e => {\n            null == c || c(\"onBeforePrint\", e);\n          }) : h(A, T, x, e);\n        }, [e]);\n      return p;\n    }\n    return r;\n  }();\n});","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}