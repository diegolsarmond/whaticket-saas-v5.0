{"ast":null,"code":"const E_TIMEOUT = new Error('timeout while waiting for mutex to become available');\nconst E_ALREADY_LOCKED = new Error('mutex already locked');\nconst E_CANCELED = new Error('request for lock canceled');\nvar __awaiter$2 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nclass Semaphore {\n  constructor(_value) {\n    let _cancelError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : E_CANCELED;\n    this._value = _value;\n    this._cancelError = _cancelError;\n    this._queue = [];\n    this._weightedWaiters = [];\n  }\n  acquire() {\n    let weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (weight <= 0) throw new Error(`invalid weight ${weight}: must be positive`);\n    return new Promise((resolve, reject) => {\n      const task = {\n        resolve,\n        reject,\n        weight,\n        priority\n      };\n      const i = findIndexFromEnd(this._queue, other => priority <= other.priority);\n      if (i === -1 && weight <= this._value) {\n        // Needs immediate dispatch, skip the queue\n        this._dispatchItem(task);\n      } else {\n        this._queue.splice(i + 1, 0, task);\n      }\n    });\n  }\n  runExclusive(callback_1) {\n    return __awaiter$2(this, arguments, void 0, function (callback) {\n      var _this = this;\n      let weight = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      let priority = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      return function* () {\n        const [value, release] = yield _this.acquire(weight, priority);\n        try {\n          return yield callback(value);\n        } finally {\n          release();\n        }\n      }();\n    });\n  }\n  waitForUnlock() {\n    let weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    if (weight <= 0) throw new Error(`invalid weight ${weight}: must be positive`);\n    if (this._couldLockImmediately(weight, priority)) {\n      return Promise.resolve();\n    } else {\n      return new Promise(resolve => {\n        if (!this._weightedWaiters[weight - 1]) this._weightedWaiters[weight - 1] = [];\n        insertSorted(this._weightedWaiters[weight - 1], {\n          resolve,\n          priority\n        });\n      });\n    }\n  }\n  isLocked() {\n    return this._value <= 0;\n  }\n  getValue() {\n    return this._value;\n  }\n  setValue(value) {\n    this._value = value;\n    this._dispatchQueue();\n  }\n  release() {\n    let weight = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    if (weight <= 0) throw new Error(`invalid weight ${weight}: must be positive`);\n    this._value += weight;\n    this._dispatchQueue();\n  }\n  cancel() {\n    this._queue.forEach(entry => entry.reject(this._cancelError));\n    this._queue = [];\n  }\n  _dispatchQueue() {\n    this._drainUnlockWaiters();\n    while (this._queue.length > 0 && this._queue[0].weight <= this._value) {\n      this._dispatchItem(this._queue.shift());\n      this._drainUnlockWaiters();\n    }\n  }\n  _dispatchItem(item) {\n    const previousValue = this._value;\n    this._value -= item.weight;\n    item.resolve([previousValue, this._newReleaser(item.weight)]);\n  }\n  _newReleaser(weight) {\n    let called = false;\n    return () => {\n      if (called) return;\n      called = true;\n      this.release(weight);\n    };\n  }\n  _drainUnlockWaiters() {\n    if (this._queue.length === 0) {\n      for (let weight = this._value; weight > 0; weight--) {\n        const waiters = this._weightedWaiters[weight - 1];\n        if (!waiters) continue;\n        waiters.forEach(waiter => waiter.resolve());\n        this._weightedWaiters[weight - 1] = [];\n      }\n    } else {\n      const queuedPriority = this._queue[0].priority;\n      for (let weight = this._value; weight > 0; weight--) {\n        const waiters = this._weightedWaiters[weight - 1];\n        if (!waiters) continue;\n        const i = waiters.findIndex(waiter => waiter.priority <= queuedPriority);\n        (i === -1 ? waiters : waiters.splice(0, i)).forEach(waiter => waiter.resolve());\n      }\n    }\n  }\n  _couldLockImmediately(weight, priority) {\n    return (this._queue.length === 0 || this._queue[0].priority < priority) && weight <= this._value;\n  }\n}\nfunction insertSorted(a, v) {\n  const i = findIndexFromEnd(a, other => v.priority <= other.priority);\n  a.splice(i + 1, 0, v);\n}\nfunction findIndexFromEnd(a, predicate) {\n  for (let i = a.length - 1; i >= 0; i--) {\n    if (predicate(a[i])) {\n      return i;\n    }\n  }\n  return -1;\n}\nvar __awaiter$1 = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nclass Mutex {\n  constructor(cancelError) {\n    this._semaphore = new Semaphore(1, cancelError);\n  }\n  acquire() {\n    return __awaiter$1(this, arguments, void 0, function () {\n      var _this2 = this;\n      let priority = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return function* () {\n        const [, releaser] = yield _this2._semaphore.acquire(1, priority);\n        return releaser;\n      }();\n    });\n  }\n  runExclusive(callback) {\n    let priority = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    return this._semaphore.runExclusive(() => callback(), 1, priority);\n  }\n  isLocked() {\n    return this._semaphore.isLocked();\n  }\n  waitForUnlock() {\n    let priority = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    return this._semaphore.waitForUnlock(1, priority);\n  }\n  release() {\n    if (this._semaphore.isLocked()) this._semaphore.release();\n  }\n  cancel() {\n    return this._semaphore.cancel();\n  }\n}\nvar __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nfunction withTimeout(sync, timeout) {\n  let timeoutError = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : E_TIMEOUT;\n  return {\n    acquire: (weightOrPriority, priority) => {\n      let weight;\n      if (isSemaphore(sync)) {\n        weight = weightOrPriority;\n      } else {\n        weight = undefined;\n        priority = weightOrPriority;\n      }\n      if (weight !== undefined && weight <= 0) {\n        throw new Error(`invalid weight ${weight}: must be positive`);\n      }\n      return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n        let isTimeout = false;\n        const handle = setTimeout(() => {\n          isTimeout = true;\n          reject(timeoutError);\n        }, timeout);\n        try {\n          const ticket = yield isSemaphore(sync) ? sync.acquire(weight, priority) : sync.acquire(priority);\n          if (isTimeout) {\n            const release = Array.isArray(ticket) ? ticket[1] : ticket;\n            release();\n          } else {\n            clearTimeout(handle);\n            resolve(ticket);\n          }\n        } catch (e) {\n          if (!isTimeout) {\n            clearTimeout(handle);\n            reject(e);\n          }\n        }\n      }));\n    },\n    runExclusive(callback, weight, priority) {\n      return __awaiter(this, void 0, void 0, function* () {\n        let release = () => undefined;\n        try {\n          const ticket = yield this.acquire(weight, priority);\n          if (Array.isArray(ticket)) {\n            release = ticket[1];\n            return yield callback(ticket[0]);\n          } else {\n            release = ticket;\n            return yield callback();\n          }\n        } finally {\n          release();\n        }\n      });\n    },\n    release(weight) {\n      sync.release(weight);\n    },\n    cancel() {\n      return sync.cancel();\n    },\n    waitForUnlock: (weightOrPriority, priority) => {\n      let weight;\n      if (isSemaphore(sync)) {\n        weight = weightOrPriority;\n      } else {\n        weight = undefined;\n        priority = weightOrPriority;\n      }\n      if (weight !== undefined && weight <= 0) {\n        throw new Error(`invalid weight ${weight}: must be positive`);\n      }\n      return new Promise((resolve, reject) => {\n        const handle = setTimeout(() => reject(timeoutError), timeout);\n        (isSemaphore(sync) ? sync.waitForUnlock(weight, priority) : sync.waitForUnlock(priority)).then(() => {\n          clearTimeout(handle);\n          resolve();\n        });\n      });\n    },\n    isLocked: () => sync.isLocked(),\n    getValue: () => sync.getValue(),\n    setValue: value => sync.setValue(value)\n  };\n}\nfunction isSemaphore(sync) {\n  return sync.getValue !== undefined;\n}\n\n// eslint-disable-next-lisne @typescript-eslint/explicit-module-boundary-types\nfunction tryAcquire(sync) {\n  let alreadyAcquiredError = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : E_ALREADY_LOCKED;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return withTimeout(sync, 0, alreadyAcquiredError);\n}\nexport { E_ALREADY_LOCKED, E_CANCELED, E_TIMEOUT, Mutex, Semaphore, tryAcquire, withTimeout };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}